'use client';

import React, { useEffect, useMemo, useRef } from 'react';
import { Map, Marker, Popup, NavigationControl } from 'react-map-gl';
import { MapPin, Phone, Mail, Globe } from 'lucide-react';
import { getMelbourneCenter, getMelbourneBounds } from '@/lib/services/mapbox';
import 'mapbox-gl/dist/mapbox-gl.css';

interface Business {
  id: string;
  name: string;
  slug: string;
  latitude: number;
  longitude: number;
  suburb: string;
  category?: string;
  phone?: string;
  email?: string;
  website?: string;
}

interface BusinessMapProps {
  businesses: Business[];
  selectedBusiness?: Business;
  onBusinessSelect?: (business: Business) => void;
  height?: string;
  showPopups?: boolean;
  interactive?: boolean;
}

const BusinessMap: React.FC<BusinessMapProps> = ({
  businesses,
  selectedBusiness,
  onBusinessSelect,
  height = '400px',
  showPopups = true,
  interactive = true,
}) => {
  const mapRef = useRef<any>(null);
  const [popupInfo, setPopupInfo] = React.useState<Business | null>(null);

  const mapboxToken = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;

  if (!mapboxToken) {
    return (
      <div 
        className="flex items-center justify-center bg-gray-100 rounded-lg"
        style={{ height }}
      >
        <p className="text-gray-500">Map unavailable - Mapbox token not configured</p>
      </div>
    );
  }

  // Calculate map bounds based on business locations
  const bounds = useMemo(() => {
    if (businesses.length === 0) {
      return getMelbourneBounds();
    }

    const lats = businesses.map(b => b.latitude);
    const lngs = businesses.map(b => b.longitude);
    
    const minLat = Math.min(...lats);
    const maxLat = Math.max(...lats);
    const minLng = Math.min(...lngs);
    const maxLng = Math.max(...lngs);

    // Add padding
    const padding = 0.01;
    return [
      [minLng - padding, minLat - padding],
      [maxLng + padding, maxLat + padding]
    ] as [[number, number], [number, number]];
  }, [businesses]);

  // Initial viewport
  const initialViewState = useMemo(() => {
    if (selectedBusiness) {
      return {
        longitude: selectedBusiness.longitude,
        latitude: selectedBusiness.latitude,
        zoom: 14
      };
    }

    const [center] = getMelbourneCenter();
    return {
      longitude: center,
      latitude: -37.8136,
      zoom: businesses.length > 1 ? 10 : 14
    };
  }, [selectedBusiness, businesses.length]);

  // Fit bounds when businesses change
  useEffect(() => {
    if (mapRef.current && businesses.length > 1) {
      mapRef.current.fitBounds(bounds, {
        padding: { top: 50, bottom: 50, left: 50, right: 50 },
        duration: 1000
      });
    }
  }, [bounds, businesses.length]);

  const handleMarkerClick = (business: Business) => {
    if (onBusinessSelect) {
      onBusinessSelect(business);
    }
    if (showPopups) {
      setPopupInfo(business);
    }
  };

  return (
    <div className="relative rounded-lg overflow-hidden border border-gray-200">
      <Map
        ref={mapRef}
        initialViewState={initialViewState}
        style={{ width: '100%', height }}
        mapStyle="mapbox://styles/mapbox/streets-v12"
        mapboxAccessToken={mapboxToken}
        interactive={interactive}
        attributionControl={false}
      >
        <NavigationControl position="top-right" />
        
        {businesses.map((business) => (
          <Marker
            key={business.id}
            longitude={business.longitude}
            latitude={business.latitude}
            onClick={() => handleMarkerClick(business)}
            style={{ cursor: 'pointer' }}
          >
            <div className={`
              w-6 h-6 rounded-full border-2 border-white shadow-lg flex items-center justify-center
              ${selectedBusiness?.id === business.id 
                ? 'bg-blue-600 scale-125' 
                : 'bg-red-500 hover:scale-110 transition-transform'
              }
            `}>
              <MapPin className="w-3 h-3 text-white" />
            </div>
          </Marker>
        ))}

        {popupInfo && showPopups && (
          <Popup
            longitude={popupInfo.longitude}
            latitude={popupInfo.latitude}
            anchor="bottom"
            onClose={() => setPopupInfo(null)}
            closeOnClick={false}
            maxWidth="300px"
          >
            <div className="p-3 min-w-[250px]">
              <h3 className="font-semibold text-gray-900 mb-1">
                {popupInfo.name}
              </h3>
              <p className="text-sm text-gray-600 mb-2">
                {popupInfo.category && `${popupInfo.category} • `}
                {popupInfo.suburb}
              </p>
              
              <div className="space-y-1 text-sm">
                {popupInfo.phone && (
                  <div className="flex items-center gap-2 text-gray-600">
                    <Phone className="w-3 h-3" />
                    <span>{popupInfo.phone}</span>
                  </div>
                )}
                {popupInfo.email && (
                  <div className="flex items-center gap-2 text-gray-600">
                    <Mail className="w-3 h-3" />
                    <span className="truncate">{popupInfo.email}</span>
                  </div>
                )}
                {popupInfo.website && (
                  <div className="flex items-center gap-2 text-gray-600">
                    <Globe className="w-3 h-3" />
                    <a 
                      href={popupInfo.website}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:underline truncate"
                    >
                      Visit Website
                    </a>
                  </div>
                )}
              </div>

              <div className="mt-3 pt-2 border-t border-gray-200">
                <a
                  href={`/business/${popupInfo.slug}`}
                  className="text-sm font-medium text-blue-600 hover:text-blue-700"
                >
                  View Profile →
                </a>
              </div>
            </div>
          </Popup>
        )}
      </Map>
    </div>
  );
};

export default BusinessMap;