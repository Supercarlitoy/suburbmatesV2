// Suburbmates Business Network - Prisma Schema
// Melbourne business connection and verification platform

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Business relationship (new ownership model)
  ownedBusinesses Business[]
  
  // Ownership claims
  ownershipClaims OwnershipClaim[]
  
  // Manual quality boosts
  manualQualityBoosts ManualQualityBoost[]
  
  // CLI jobs
  cliJobs CLIJob[]

  @@map("users")
}

// Business Profiles
model Business {
  id           String   @id @default(cuid())
  slug         String   @unique
  name         String
  suburb       String   // Primary suburb
  category     String?  // Business category
  phone        String?
  email        String?
  website      String?
  
  // Geolocation data
  latitude     Float?
  longitude    Float?
  
  // Legacy verification (deprecated in favor of abnStatus)
  verified     Boolean  @default(false) // Only true if abnStatus=VERIFIED
  
  // ABN Management (Optional)
  abn          String?  // Australian Business Number
  abnStatus    AbnStatus @default(NOT_PROVIDED)
  
  // Approval Workflow
  approvalStatus     ApprovalStatus @default(PENDING)
  requiresVerification Boolean @default(false)
  approvedAt         DateTime?
  rejectedAt         DateTime?
  
  // Directory Management
  source       BusinessSource @default(MANUAL)
  qualityScore Int      @default(0) // 0-100
  duplicateOfId String? // foreign key to Business
  ownerId      String?  // foreign key to User
  
  // Profile Customization (preserved from existing)
  bio          String?
  serviceAreas String   @default("") // JSON string of suburbs they service
  postcode     String?
  logo         String?
  themeId      String?  @default("corporate-blue") // Profile theme
  layoutId     String?  @default("standard") // Layout option
  headerStyle  String?  @default("standard") // Header style
  ctaText      String?  @default("Get Quote") // Call-to-action text
  ctaStyle     String?  @default("button") // CTA style
  showTestimonials Boolean @default(true) // Show testimonials section
  showGallery  Boolean  @default(true) // Show gallery section
  showBusinessHours Boolean @default(true) // Show business hours
  
  // Social Media Links
  facebookUrl  String?
  instagramUrl String?
  linkedinUrl  String?
  
  // Full-text search fields
  searchVector Unsupported("tsvector")? // PostgreSQL full-text search vector
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  owner    User?     @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  duplicateOf Business? @relation("BusinessDuplicates", fields: [duplicateOfId], references: [id])
  duplicates  Business[] @relation("BusinessDuplicates")
  content  Content[]
  leads    Lead[]
  inquiries Inquiry[]
  ownershipClaims OwnershipClaim[]
  customization BusinessProfileCustomization?
  auditLogs AuditLog[]
  manualQualityBoosts ManualQualityBoost[]

  @@index([ownerId])
  @@map("businesses")
}

// Business Profile Customization
model BusinessProfileCustomization {
  id               String   @id @default(cuid())
  businessId       String   @unique
  layout           ProfileLayout @default(CLASSIC)
  accent           AccentColor @default(BLUE)
  tagline          String?  @db.VarChar(60)
  highlights       String[] // Up to 5 items
  services         String[] // Up to 8 items, 40 chars each
  coverImageUrl    String?
  logoUrl          String?
  gallery          String[] // Up to 6 images
  shareTheme       ShareTheme @default(STANDARD)
  watermarkOpacity Float    @default(0.15)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_customizations")
}

// Business Content Management
model Content {
  id         String      @id @default(cuid())
  businessId String
  type       ContentType @default(POST)
  title      String?
  text       String
  images     String      @default("") // JSON string of image URLs
  tags       String      @default("") // JSON string of tags
  isPublic   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("content")
}

// Lead Management
model Lead {
  id         String     @id @default(cuid())
  businessId String
  name       String
  email      String
  phone      String?
  message    String
  source     LeadSource @default(PROFILE)
  status     LeadStatus @default(NEW)
  createdAt  DateTime   @default(now())

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("leads")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

// Directory Admin Spec Enums
enum AbnStatus {
  NOT_PROVIDED
  PENDING
  VERIFIED
  VALID
  INVALID
  EXPIRED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BusinessSource {
  MANUAL
  CSV
  CSV_IMPORT
  AUTO_ENRICH
  CLAIMED
}

// Legacy enum (deprecated)
enum BusinessStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ContentType {
  POST
  UPDATE
  ANNOUNCEMENT
}

enum LeadSource {
  PROFILE
  SEARCH
  FEED
  SHARE
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  CLOSED
}

// Profile Customization Enums
enum ProfileLayout {
  CLASSIC
  BOLD
  COMPACT
}

enum AccentColor {
  BLUE
  MINT
  AMBER
  PURPLE
  RED
  GREEN
}

enum ShareTheme {
  STANDARD
  BOLD
}

// Ownership Claims for Business Verification
model OwnershipClaim {
  id         String      @id @default(cuid())
  businessId String
  userId     String
  method     ClaimMethod
  status     ClaimStatus @default(PENDING)
  evidence   Json?       // Verification evidence data
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ownership_claims")
}

// Business Inquiries (Enhanced Lead Capture)
model Inquiry {
  id         String   @id @default(cuid())
  businessId String
  name       String
  email      String?
  phone      String?
  message    String
  utm        Json?    // UTM tracking parameters
  createdAt  DateTime @default(now())

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("inquiries")
}

// Audit Log for Business Actions
model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?  // User who performed action
  action    String   // Action performed
  eventType String?  // Event type for filtering
  target    String?  // Target resource ID
  meta      Json?    // Additional metadata
  ipAddress String?  // Request IP address (optional)
  userAgent String?  // Request user agent (optional)
  createdAt DateTime @default(now())
  
  // Relationships
  business  Business? @relation(fields: [target], references: [id])

  @@map("audit_logs")
}

// Additional enums for new models
enum ClaimMethod {
  EMAIL_DOMAIN
  PHONE_OTP
  DOCUMENT
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  CLOSED
}


// Feature Flags for automation and A/B testing
model FeatureFlag {
  key         String  @id
  enabled     Boolean @default(false)
  value       Json?   // Configuration values
  description String?
  audience    String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@map("feature_flags")
}

// Manual Quality Score Boosts for Admin Control
model ManualQualityBoost {
  id            String   @id @default(cuid())
  businessId    String
  adminUserId   String
  originalScore Int      // Score before boost
  boostAmount   Int      // Positive or negative boost
  newScore      Int      // Score after boost
  reason        String   // Admin reason for boost
  category      BoostCategory @default(OTHER)
  expiresAt     DateTime? // Null for permanent boosts
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  adminUser   User     @relation(fields: [adminUserId], references: [id], onDelete: Restrict)

  @@map("manual_quality_boosts")
}

// Enum for manual boost categories
enum BoostCategory {
  PREMIUM_LISTING
  QUALITY_EXCEPTION
  MARKETING_BOOST
  PARTNERSHIP
  CORRECTION
  SEASONAL_PROMOTION
  OTHER
}

// CLI Job Management for Web Bridge
model CLIJob {
  id          String        @id @default(cuid())
  command     String        // CLI command executed
  args        Json          // Command arguments
  status      CLIJobStatus  @default(PENDING)
  progress    Json?         // Progress data {current, total, message, percentage}
  result      Json?         // Job result {success, data, error, output, warnings}
  createdAt   DateTime      @default(now())
  startedAt   DateTime?     // When job started execution
  completedAt DateTime?     // When job completed
  createdBy   String        // User ID who created the job
  metadata    Json          @default("{}")
  
  // Relationships
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@index([createdBy])
  @@index([createdAt])
  @@map("cli_jobs")
}


// CLI Job Status Enum
enum CLIJobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
